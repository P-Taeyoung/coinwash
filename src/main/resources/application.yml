spring:
  application:
    name: coinwash

  # Thymeleaf 기본 설정
  thymeleaf:
    cache: false  # 개발용 - 템플릿 변경시 즉시 반영
    encoding: UTF-8
    mode: HTML
    prefix: classpath:/templates/
    suffix: .html

  # 정적 리소스 설정
  web:
    resources:
      static-locations: classpath:/static/

  datasource:
    # 🔧 Docker 서비스명 사용 + 환경변수로 동적 설정
    url: ${SPRING_DATASOURCE_URL:jdbc:mysql://mysql:3306/coinwash?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Seoul}
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: ${SPRING_DATASOURCE_USERNAME:user}
    password: ${MYSQL_PASSWORD}
    hikari:
      # 🎯 성능 최적화 (production-ready)
      maximum-pool-size: 300        # 15 → 300 (고성능)
      minimum-idle: 100             # 5 → 100 (안정성)
      connection-timeout: 20000     # 유지 (20초)

      # 🔍 모니터링 활성화
      register-mbeans: true
      leak-detection-threshold: 60000  # 유지 (60초)

      # 🔧 성능 최적화 옵션들
      idle-timeout: 300000          # 5분 유지
      max-lifetime: 1800000         # 15분 → 30분 (안정성)
      validation-timeout: 3000      # 5초 → 3초 (빠른 검증)
      initialization-fail-timeout: 1  # 빠른 실패


  jpa:
    show-sql: true  # 개발용 유지
    hibernate:
      ddl-auto: update  # 개발용 유지
    properties:
      hibernate:
        # 🚀 JPA 성능 최적화 (안전한 설정)
        jdbc.batch_size: 50           # 배치 처리
        order_inserts: true           # 삽입 순서 최적화
        order_updates: true           # 업데이트 순서 최적화
        jdbc.batch_versioned_data: true

  jwt:
    secret: ${JWT_SECRET_KEY}

  data:
    redis:
      # 🔧 Docker 서비스명 사용
      host: ${REDIS_HOST:redis}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD}
      timeout: 2000ms               # 20초 → 2초 (적절한 타임아웃)
      connect-timeout: 3000ms       # 5초 → 3초 (빠른 연결)
      lettuce:
        pool:
          # 🎯 Redis 커넥션 풀 최적화
          max-active: 500             # 100 → 500 (고성능)
          max-idle: 100               # 50 → 100 (적절한 유지)
          min-idle: 20                # 5 → 20 (기본 확보)
          max-wait: 3000ms            # 유지 (3초)

          # 🔧 커넥션 관리 최적화
          test-on-borrow: false       # 빌릴 때 테스트 생략
          test-on-return: false       # 반납 시 테스트 생략
          test-while-idle: true       # 유휴 시에만 테스트
          time-between-eviction-runs: 30000ms  # 30초마다 정리
          min-evictable-idle-time: 60000ms     # 60초 유휴 시 제거

        shutdown-timeout: 2000ms      # 100ms → 2초 (안정적 종료)


kakao:
  api:
    key: ${KAKAO_API_KEY}

# 🚀 서버 성능 최적화 (추가)
server:
  tomcat:
    threads:
      max: 500
      min-spare: 50
    max-connections: 10000
    connection-timeout: 30000
    accept-count: 200
    max-http-form-post-size: 2MB

    # 🔧 추가 최적화
    processor-cache: 200
    max-keep-alive-requests: 100

# 🔍 로깅 최적화
logging:
  level:
    com.zaxxer.hikari: INFO
    org.springframework.web: INFO
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE


